<.header>
  My Words
  
  <:left_actions>
    <div class="flex items-center space-x-2">
      <button type="button" onclick="toggleSearch()" class="text-zinc-600 hover:text-sky-600 transition-colors" id="search-btn">
        <.icon name="hero-magnifying-glass-circle" class="w-7 h-7 sm:w-7 sm:h-7" />
      </button>
      
      <!-- Type Filter Dropdown - always visible -->
      <div class="relative">
        <button 
          type="button" 
          onclick="toggleTypeFilter()" 
          class="text-zinc-600 hover:text-sky-600 transition-colors"
          id="type-filter-btn"
          title="Filter by type"
        >
          <.icon name="hero-tag" class="w-7 h-7 sm:w-7 sm:h-7" />
        </button>
        
        <!-- Dropdown Menu -->
        <div id="type-filter-menu" class="hidden absolute left-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-zinc-200 z-10" style="margin-left: -3rem;">
          <div class="py-1">
            <button 
              type="button" 
              onclick="filterByType('')" 
              class="w-full text-left px-4 py-2 text-sm text-zinc-700 hover:bg-zinc-50 transition-colors"
              data-type-name=""
            >
              All Types
            </button>
            <%= for word_type <- @word_types do %>
              <button 
                type="button" 
                class="w-full text-left px-4 py-2 text-sm text-zinc-700 hover:bg-zinc-50 transition-colors"
                data-type-name={word_type.name}
                onclick="filterByType(this.dataset.typeName)"
              >
                <%= String.capitalize(word_type.name) %>s
              </button>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </:left_actions>
  
  <:actions>
    <.link href={~p"/words/new"}>
      <.button>Add</.button>
    </.link>
  </:actions>
</.header>

<!-- Search div that appears below header -->
<div id="search-container" class="hidden mb-5">
  <input
    type="search"
    id="word-search"
    placeholder="Type to filter..."
    autocomplete="off"
    class={[
      "rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6 mt-2",
      "border-zinc-300 focus:border-zinc-400",
      "disabled:bg-zinc-50 disabled:text-zinc-500 disabled:border-zinc-200"
    ]}    
    oninput="filterWords()"
  />
</div>

<%= for word_type <- @word_types do %>
  <% words_for_type = Enum.filter(@words, fn word -> word.word_type_id == word_type.id end) %>
  <% type_title = "#{String.capitalize(word_type.name)}s" %>
  <%= if length(words_for_type) > 0 do %>
    <.table id={"words_#{word_type.id}"} rows={words_for_type} row_click={&JS.navigate(~p"/words/#{&1}/edit")} data-type={word_type.name}>
      <:col :let={word} label={type_title}><%= word.text %></:col>
      <:action :let={word}>
        <.link href={~p"/words/#{word}"} method="delete" data-confirm="Are you sure?">
          <.icon name="hero-x-mark" />
        </.link>
      </:action>
    </.table>
    <% else %>
      <div class="w-full mt-3" data-type={word_type.name}>
        <table class="w-full">
          <thead class="text-sm text-left leading-6 text-zinc-500">
            <tr>
              <th class="p-0 pb-1 pt-3 pr-4 font-normal"><%= type_title %></th>
            </tr>
          </thead>
          <tbody class="relative divide-y divide-zinc-100 border-t border-zinc-200 text-sm leading-6 text-zinc-700">
            <tr class="group">
              <td class="relative p-0">
                <div class="block py-3 pr-4">
                  <span class="absolute -inset-y-px right-0 -left-4 sm:rounded-l-xl" />
                  <span class="relative italic text-zinc-500">
                    None 
                  </span>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    <% end %>
<% end %>

<div class="text-center text-sm italic text-zinc-400 mt-6 mb-12">
  Word Count: <%= length(@words) %>
</div>

<script>
let currentTypeFilter = '';
let isTypeFilterOpen = false;

function toggleSearch() {
  const container = document.getElementById('search-container');
  const input = document.getElementById('word-search');
  const searchBtn = document.getElementById('search-btn');
  
  if (container.classList.contains('hidden')) {
    // Close type filter if open
    closeTypeFilter();
    
    // Open search
    container.classList.remove('hidden');
    searchBtn.classList.remove('text-zinc-600');
    searchBtn.classList.add('text-sky-600');
    if (input) input.focus();
  } else {
    // Close search
    container.classList.add('hidden');
    searchBtn.classList.remove('text-sky-600');
    searchBtn.classList.add('text-zinc-600');
    if (input) {
      input.value = '';
      filterWords(); // Keep type filter but clear search
    }
  }
}

function toggleTypeFilter() {
  const menu = document.getElementById('type-filter-menu');
  const button = document.getElementById('type-filter-btn');
  
  if (isTypeFilterOpen) {
    closeTypeFilter();
  } else {
    // Close search if open
    const searchContainer = document.getElementById('search-container');
    const searchBtn = document.getElementById('search-btn');
    if (!searchContainer.classList.contains('hidden')) {
      searchContainer.classList.add('hidden');
      searchBtn.classList.remove('text-sky-600');
      searchBtn.classList.add('text-zinc-600');
      const input = document.getElementById('word-search');
      if (input) {
        input.value = '';
        filterWords();
      }
    }
    
    // Open type filter
    menu.classList.remove('hidden');
    button.classList.remove('text-zinc-600');
    button.classList.add('text-sky-600');
    isTypeFilterOpen = true;
  }
}

function closeTypeFilter() {
  const menu = document.getElementById('type-filter-menu');
  const button = document.getElementById('type-filter-btn');
  
  menu.classList.add('hidden');
  if (currentTypeFilter === '') {
    button.classList.remove('text-sky-600');
    button.classList.add('text-zinc-600');
  }
  isTypeFilterOpen = false;
}

function filterByType(typeName) {
  currentTypeFilter = typeName;
  updateTypeFilterButton();
  closeTypeFilter();
  filterWords();
}

function updateTypeFilterButton() {
  const button = document.getElementById('type-filter-btn');
  
  if (currentTypeFilter === '') {
    button.classList.remove('text-sky-600');
    button.classList.add('text-zinc-600');
    button.title = 'Filter by type';
  } else {
    button.classList.remove('text-zinc-600');
    button.classList.add('text-sky-600');
    button.title = `Filtering by: ${currentTypeFilter}`;
  }
}

function filterWords() {
  const searchTerm = document.getElementById('word-search').value.toLowerCase();
  
  // Find all table containers (both component tables and standalone tables)
  const allContainers = document.querySelectorAll('[data-type]');
  
  let totalVisibleRows = 0;
  
  allContainers.forEach(container => {
    const containerType = container.getAttribute('data-type');
    let shouldShowContainer = false;
    
    // Check if container matches type filter
    const matchesTypeFilter = currentTypeFilter === '' || containerType === currentTypeFilter;
    
    if (!matchesTypeFilter) {
      container.style.display = 'none';
      return;
    }
    
    // Check if it's a table component or standalone table
    const table = container.querySelector('table') || container;
    const rows = table.querySelectorAll('tbody tr');
    
    // Handle word filtering
    if (rows.length > 0) {
      rows.forEach(row => {
        const firstCell = row.querySelector('td:first-child');
        if (firstCell) {
          const text = firstCell.textContent.trim().toLowerCase();
          const isNoneRow = text === 'none';
          
          if (!isNoneRow && (text.includes(searchTerm) || searchTerm === '')) {
            row.style.display = '';
            shouldShowContainer = true;
            totalVisibleRows++;
          } else if (isNoneRow && searchTerm === '') {
            row.style.display = '';
            shouldShowContainer = true;
          } else {
            row.style.display = 'none';
          }
        }
      });
    }
    
    // Show/hide container based on whether it has visible content
    if (shouldShowContainer || (searchTerm === '' && matchesTypeFilter)) {
      container.style.display = '';
    } else {
      container.style.display = 'none';
    }
  });
  
  // Show/hide "no results" message
  showNoResultsMessage(totalVisibleRows, searchTerm);
}

function showNoResultsMessage(visibleCount, searchTerm) {
  // Remove existing no results message
  const existingMessage = document.getElementById('no-results-message');
  if (existingMessage) {
    existingMessage.remove();
  }
  
  // Show message if no results and there's a search term or type filter
  if (visibleCount === 0 && (searchTerm.trim() !== '' || currentTypeFilter !== '')) {
    const message = document.createElement('div');
    message.id = 'no-results-message';
    message.className = 'text-center py-8 text-zinc-500';
    
    let messageText = '';
    if (searchTerm.trim() !== '' && currentTypeFilter !== '') {
      messageText = `No ${currentTypeFilter}s matching '${searchTerm}'`;
    } else if (searchTerm.trim() !== '') {
      messageText = `No results matching '${searchTerm}'`;
    } else if (currentTypeFilter !== '') {
      messageText = `No ${currentTypeFilter}s found`;
    }
    
    message.innerHTML = `
      <div class="text-sm italic text-zinc-500">${messageText}</div>
    `;
    
    // Insert message after the search container
    const searchContainer = document.getElementById('search-container');
    if (searchContainer && searchContainer.nextElementSibling) {
      searchContainer.parentNode.insertBefore(message, searchContainer.nextElementSibling);
    }
  }
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
  const menu = document.getElementById('type-filter-menu');
  const button = document.getElementById('type-filter-btn');
  
  if (!menu.contains(event.target) && !button.contains(event.target)) {
    closeTypeFilter();
  }
});
</script>